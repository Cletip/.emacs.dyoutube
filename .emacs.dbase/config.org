

#+TITLE:Votre config.org
# #+TAGS: High(h) Medium Low 
#+TODO: ACTIVE | DISABLED

Description

* Raccourcis, en premier si crash

#+begin_src emacs-lisp
  ;; ici vos raccourcis
#+end_src

* Les fonctionnalité "basic"
** Variable et mode built-in 

Voici toutes les optimisations de base d'emacs (tout est un peu en vrac, ajoutez au fur et à mesure, vous n'aurez pas besoin de les revoir).
Je vous conseille de jeter un coup d'oeil rapide.

*** Gestion des sauvegardes, et fichiers à ne pas mettre dans les backups

#+begin_src emacs-lisp 

  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t       ; Put the deleted files in the trash
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )

  ;;sauvegarde toute les 10s
  (run-with-timer 10 10 (lambda () (save-some-buffers t)))



  ;;fichier à ne pas copier dans les backups
  (setq auto-mode-alist
        (append
         (list
          '("\\.\\(vcf\\|gpg\\)$" . sensitive-minor-mode)
          )
         auto-mode-alist))

#+end_src
*** Permet de r y ou n au lieu de yes ou no 

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)
  
#+end_src
*** Rafraichit automatiquement les buffers, sauf si ya eu des moddif évidemment
#+begin_src emacs-lisp 

(global-auto-revert-mode t)

#+end_src
*** Échap en une fois
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; (global-unset-key (kbd "C-g"))
  ;; (global-set-key (kbd "C-g") 'keyboard-escape-quit)

#+end_src
*** Réécriture/remplacement lors de texte sélectionné
#+begin_src emacs-lisp

  (delete-selection-mode t)
  
#+end_src
*** Sauvegarde la place du curseur(marche sans no-litteralling)

#+begin_src emacs-lisp


  (with-eval-after-load 'no-littering ;;important
    (save-place-mode 1)
    )


#+end_src

*** Fichiers récents 

#+begin_src emacs-lisp 

  (with-eval-after-load 'no-littering ;;important
    (require 'recentf)
    (recentf-mode 1)
    (setq recentf-max-menu-items 100)
    (setq recentf-max-saved-items 100)

    ;; fichier à exclure de recentf
    ;; If you use recentf then you might find it convenient to exclude all of the files in the no-littering directories using something like the following.
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    
    (add-to-list 'recentf-exclude "/tmp/") ;;pour emacs-everywhere notamment
    )



#+end_src

*** Réavoir les dernière commandes

Cela permet de ré-avoir les commandes faites lors de la dernière session d'emacs.

#+begin_src emacs-lisp 

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (setq savehist-file (concat my-user-emacs-directory "var/savehist.el"))
    :config
    (setq history-length 200)
    ;;List of additional variables to save.
    (setq savehist-additional-variables '(kill-ring search-ring recentf-list))
    (savehist-mode t)
    
    ;; pour améliorer les perf ? voir avec Mathieu
    (put 'minibuffer-history 'history-length 50)
    (put 'evil-ex-history 'history-length 50)
    (put 'kill-ring 'history-length 25)
    )

#+end_src
** Garder le .emacs.d clean

#+begin_src emacs-lisp 

  (use-package no-littering
    ;;custom remplace tous les setq
    :custom
    ;; définition de l'emplacement de certains fichiers
    (custom-file (expand-file-name "var/custom.el" my-user-emacs-directory)) ;;pour les variable
    )

#+end_src

* Une catégorie

** Une autre catégorie

#+begin_src emacs-lisp
  ;; du code ici
#+end_src

** Une autre catégorie

* Une autre catégorie

* Org-mode

Mtn, on peut taper "<el <sh" puis "tab", et cest parti pour org-babel !
** Meilleur insertion de code dans emacs
#+begin_src emacs-lisp
      (require 'org-tempo)
      
      (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
      (add-to-list 'org-structure-template-alist '("cd" . "src C"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
      (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
      (add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src

* Vérification que tout à bien marché avec la tool-bar-mode désactivée

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

