

*** L'intérieur d'emacs ! Comment installer des packages, base d'org mode


**** Comment on va faire ?

- straight : méthode de téléchargement des packages. D'autres opérations utiles comme freeze, mettre à jour tous les packages, etc.
- use-package : permet de simplifier la déclaration pour télécharger les packages.

**** Explication du .emacs.d

Après téléchargement et renomage du .emacs.dBase

1. init.el
   Straight + Lance les options + la fonction pour tangle qui est pratique (=pas de caractère spécial !=)
2. config.org, la suite
3. config.el, pareil que le .org mais est chargé par emacs.
4. earlyinit.el, charge une configuration tôt (avant la fenêtre même)


**** Lets'go

Copier le init.el et le config.org dans son emacs.d. Attendre 1 2 minutes... et c'est partie !

**** Comment installer des packages avec use-package

Déclaration des packages :

TODO utilisé custom. Expliqué que c'est load avant require, mais au final change rien, car le defvelopeur utilise defvar et defcustom, donc ne réécrit pas par dessus

#+begin_src emacs-lisp


    ;;commentaires
    ;; les parties sont séparé par :nomdelapartie

    (use-package nomdupackage
      ;; :straight nil, ne télécharge pas
      ;; :ensure t, le télécharge mais pas à mettre pour vous car automatique
      :if (condition)

      :after nomd'unautrepackage

      :load-path "chemin/vers/le/package/si/cloner/en/local/"
      ;;:load-path "~/.emacs.d/lisp/elfeed-dashboard/"

      :hook (org . tool-bar-mode) ;;quand org, alors active la tool-bar
      ;; :hook ((modeahook unautre encoreun) . lemodeaactiver) ;; autre syntax

      :init ;;toute cette partie est chargé AVANT le package
      (setq unevariableamoddifavantlepackage nil)
      (activer-un-mode-avant t)

      :custom
      (unevariabledupackagesanslesetq t)
      ;;commentaires

      :config ;;toute cette partie est chargé APRÈS le package. C'est comme dans le init.el

      (setq mavariable nil) ;;setq = moddif de la valeur de la variable
      (add-hook 'org-mode-hook 'electric-pair-mode) ;; autre syntax du hook

      ) ;;parenthèse de fin du package

    (add-hook 'org-mode-hook 'electric-pair-mode) ;; hook que l'on peut aussi mettre hors du package, mais moin propre  


  ;; version rapide :
  (use-package all-the-icons-dired)

  ;;version avec des options :
  (use-package flycheck-grammalecte
    :after flycheck
    :hook(org-mode . flycheck) ;; pour pouvoir corriger en org mode
    :init
    (setq
     ;; pas de faute avec les '
     flycheck-grammalecte-report-apos nil
     ;; pas de faute avec les espaces insécable
     flycheck-grammalecte-report-nbsp nil
     ;; pas de faute avec pleins d'espaces et de tab
     flycheck-grammalecte-report-esp nil)
    :config
    ;;à faire pour enlever l'erreur des tirés
    ;; pour enlever l'erreur des des begin_src etc

    (grammalecte-download-grammalecte)
    (flycheck-grammalecte-setup)
    )



#+end_src

**** Comment faire une bonne config ?

 Les if, when, tuto xah lisp. Utiliser la super fonction pour rapidement déboguer (attention de pas mettre de "")


TODO

Passer de ça :

(require 'foo-bar)
(foo-bar-mode 1)
(setq foo-bar-baz '(a b c))
(add-hook 'text-mode-hook 'foo-bar-minor-mode)
(define-key text-mode-map (kbd "M-a") #'foo-bar-do-generic)
(global-set-key (kbd "M-a") #'foo-bar-make-something)
and all related symbols are defined in the same library foo-bar.el (you can always tell by calling M-x describe-symbol)

the first step is to put all the stuff (except require) into :config section of use-package form, like

À ça :

(use-package foo-bar ; no apostrophe here!
  :ensure t ; only you if install it using package.el from ELPA/MELPA/etc, no need to for internal/local packages
  :config ; do all the stuff after the package is loaded
  (foo-bar-mode 1)
  (setq foo-bar-baz '(a b c))
  (add-hook 'text-mode-hook 'foo-bar-minor-mode)
  (define-key text-mode-map (kbd "M-a") #'foo-bar-do-generic)
  (global-set-key (kbd "M-a") #'foo-bar-make-something))

You are already fine here, it's use-packaged! But we can go further
À ça :

(use-package foo-bar
  :ensure t 
  :config 
  (foo-bar-mode 1)
  :custom
  (foo-bar-baz '(a b c))
  :hook
  (text-mode . foo-bar-minor-mode) ; no "-hook"!, no '
  :bind
  (("M-a" . foo-bar-make-something)
   :map text-mode-map
   ("M-a" . foo-bar-do-generic)))
