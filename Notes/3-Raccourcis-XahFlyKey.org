
*** Raccourcis : zoom sur xah-fly-keys

À partir de là on commence à devenir efficace.
SPC C-h pour voir toutes les commandes

**** La base

Pour mettre capslock en home :

- créer un fichier Xmodmap, mettre ceci dedans : 
  ! pour savoir le keycode d'une touche : "xev" dans un terminal
  clear lock
  keycode 66 = Home NoSymbol Home
- (shell-command "xmodmap ~/lien/vers/le/fichier/Xmodmap") dans emacs, ou mettre
  "xmodmap ~/lien/vers/le/fichier/Xmodmap" en application de démarrage

Et c'est tout !

Installation basique



#+begin_src emacs-lisp
  (use-package xah-fly-keys
    :config
    (xah-fly-keys-set-layout "azerty")
    )
#+end_src

OU bien

#+begin_src emacs-lisp
  (use-package xah-fly-keys
    :config
    (xah-fly-keys-set-layout "azerty")

    ;; ceci n'est pas obligatoire !
    ;; je ne l'utilise plus, mais c'est une question de goût
    ;; permet de mettru "d" (clavier azerty ) comme une touche enter
    (defun cp-xfk-addon-command ()
      "Modify keys for xah fly key command mode keys To be added to `xah-fly-command-mode-activate-hook'"
      (interactive)
      (define-key xah-fly-key-map (kbd "d") (kbd "RET"));;newline comme enter
      )

    (add-hook 'xah-fly-command-mode-activate-hook 'cp-xfk-addon-command)

    )
#+end_src

[[http://xahlee.info/emacs/misc/xah-fly-keys_tutorial.html][Voir ici pour le tutorial]], le faire, et pratiquer !
Système en "chouche", bien assimilé la première


**** Xah-fly-keys personnalisation

***** Personnalisation basique

****** Les remaps

#+begin_src emacs-lisp

  (define-key xah-fly-key-map [remap recentf-open-files] #'consult-recent-file)

#+end_src

****** Changer les touches

#+begin_src emacs-lisp

  (xah-fly--define-keys
   xah-fly-command-map
   '(
     ("~" . nil)
     (":" . nil)

     ("SPC" . xah-fly-leader-key-map)
     ("'" . xah-reformat-lines)
     ("," . xah-shrink-whitespaces)
     ("-" . xah-cycle-hyphen-lowline-space)
     ("." . backward-kill-word)
     (";" . xah-comment-dwim)
     ("/" . hippie-expand)
     ("\\" . nil)
     ("=" . nil)
     ("[" . xah-backward-punct )
     ("]" . xah-forward-punct)
     ("`" . other-frame)

     ;; ("$" . xah-forward-punct)

     ("1" . xah-extend-selection)
     ("2" . xah-select-line)
     ("3" . delete-other-windows)
     ("4" . split-window-below)
     ("5" . delete-char)
     ("6" . xah-select-block)
     ("7" . xah-select-line)
     ("8" . xah-extend-selection)
     ("9" . xah-select-text-in-quote)
     ("0" . xah-pop-local-mark-ring)

     ("a" . execute-extended-command)
     ("b" . isearch-forward)
     ("c" . previous-line)
     ("d" . xah-beginning-of-line-or-block)
     ;; ("e" . xah-delete-left-char-or-selection)
     ("e" . xah-delete-backward-char-or-bracket-text)
     ("f" . undo)
     ("g" . backward-word)
     ("h" . backward-char)
     ("i" . xah-delete-current-text-block)
     ("j" . xah-copy-line-or-region)
     ("k" . xah-paste-or-paste-previous)
     ;; ("l" . xah-fly-insert-mode-activate-space-before)
     ("l" . xah-insert-space-before)
     ("m" . xah-backward-left-bracket)
     ("n" . forward-char)
     ("o" . open-line)
     ("p" . kill-word)
     ("q" . xah-cut-line-or-region)
     ("r" . forward-word)
     ("s" . xah-end-of-line-or-block)
     ("t" . next-line)
     ("u" . xah-fly-insert-mode-activate)
     ("v" . xah-forward-right-bracket)
     ("w" . xah-next-window-or-frame)
     ("x" . xah-toggle-letter-case)
     ("y" . set-mark-command)
     ("z" . xah-goto-matching-bracket)))

#+end_src

***** Mon exemple
Mon extension :

#+begin_src emacs-lisp

  (use-package xah-fly-keys-layer
    :after xah-fly-keys
    :straight (xah-fly-keys-layer
               :type git
               :host github
               :repo "Cletip/xah-fly-keys-layer")
    :init

    :config

    ;; change variable before require the extension
    (setq xah-fly-keys-layer-auto-command-mode
          '(recentf-cancel-dialog
            dashboard-jump-to-bookmarks
            org-agenda-show-dashboard
            dired-jump
            vertico-exit
            ace-link-eww
            ))
    (setq xah-fly-keys-layer-auto-insert-mode
          '(
            execute-extended-command-for-buffer
            org-meta-return
            org-insert-heading-respect-content
            org-insert-link
            recentf-open-files
            ;; org-capture ;; désactivé car fait bugguer !
            ))
    (require 'xah-fly-keys-layer-auto-mode)

    ;; change variable before require the extension
    (setq xah-fly-keys-layer-better-place-isearch-forward t
          xah-fly-keys-layer-better-place-for-pinky-parens t
          xah-fly-keys-layer-better-place-for-pinky-block t)
    (require 'xah-fly-keys-layer-better-place)

    ;;for all other extensions, you can change variable after require the extension

    (require 'xah-fly-keys-layer-better-remap)
    (setq xah-fly-key-layer-isearch-forward-variable 'consult-line
          xah-fly-key-layer-ispell-word-variable 'flyspell-correct-wrapper
          xah-fly-key-layer-xah-extend-selection-variable 'er/expand-region
          xah-fly-key-layer-xah-open-file-at-cursor-variable 'cp/open-link
          xah-fly-key-layer-recentf-open-files-variable 'consult-recent-file
          ;;since I don't use save-buffer, I prefer this
          xah-fly-key-layer-save-buffer-variable 'avy-goto-char-2)

    (require 'xah-fly-keys-layer-major-mode)
    ;; like default place, but change here if you want
    (setq xah-fly-keys-layer-major-mode-key (xah-fly--convert-kbd-str "i"))
    ;; override a default keymap : 
    (xah-fly--define-keys
     (define-prefix-command 'xah-fly-keys-layer-org-mode-keymap)
     '(("SPC" . org-mode-babel-keymap)

       ;; ("-" . "^") NOTE: this is a dead key
       ("'" . org-table-create-or-convert-from-region)
       ("," . org-mark-element)
       ("." . org-todo)
       (";" . org-toggle-narrow-to-subtree)
       ;; ("/" . "x")

       ;; ("[" . "=")
       ;; ("]" . "%")

       ;; ("=" . "ç")

       ("a" . org-export-dispatch)
       ;; ("b" . org-goto)
       ("b" . consult-org-heading) ;; mieux
       ("c" . org-insert-link)
       ("L" . org-store-link)
       ("d" . org-mode-keymap-movement)
       ("e" . org-meta-return)
       ;; ("E" . org-insert-todo-heading)
       ("f" . org-roam-ref-add)
       ("g" . org-roam-buffer-toggle)
       ("h" . vulpea-insert)
       ;; ("i" . ",")
       ("j" . org-deadline)
       ("k" . org-schedule)
       ("l" . "cp-vulpea-buffer-tags-remove-BROUILLON")
       ;; ("m" . org-insert-todo-heading)
       ("n" . vulpea-tags-add)
       ("o" . org-refile)
       ("p" . org-set-tags-command)
       ("q" . org-sort)
       ("r" . vulpea-meta-add)
       ("s" . citar-insert-citation)
       ;; ("t" . vulpea-find-backlink)
       ;; ("u" . org-capture-keymap) ;; TODO, mis dans SPC SPC
       ;; ("u" . org-capture)  ;; TODO changer

       ("v" . org-insert-todo-heading)
       ;; ("v" . cp-vulpea-meta-fait-add)
       ("w" . consult-org-roam-forward-links)
       ("x" . org-time-stamp)
       ;; ("y" . "b")
       ;; ("z" . "v")
       ))

    ;; load your personnal keymap with SPC SPC
    (require 'xah-fly-keys-layer-personal-keymap)
    (xah-fly--define-keys
     (define-prefix-command 'xah-fly-keys-layer-personal-key-map)
     '(("RET" . cp/org-open-or-finish-capture)
       ;; ("<up>"  . xah-move-block-up)
       ;; ("<down>"  . xah-move-block-down)
       ("'" . save-buffers-kill-emacs)
       ("," . emacs-restart)
       ("." . org-agenda)
       ;; ("0" . nil)
       ;; ("1" . nil)
       ;; ("2" . nil)
       ;; ("3" . nil)
       ;; ("4" . nil)
       ;; ("5" . nil)
       ;; ("6" . nil)
       ;; ("7" . nil)
       ;; ("8" . nil)
       ("9" . flycheck-grammalecte-correct-error-before-point)

       ("a" . engine-mode-prefixed-map)
       ;; ("b" . nil)
       ;; ("c" . nil)
       ;; ("d" . org-capture-keymap)
       ("d" . helpful-at-point)
       ;; ("e" . nil)
       ("f" . org-next-link)
       ("g" . consult-org-roam-search)
       ("h" . cp/org-edit-special-src-dwim)
       ;; ("i" . nil)
       ("j" . org-next-link)
       ;; ("k" . nil)
       ;; ("l" . nil)
       ("m" . vulpea-find)
       ("n" . winner-undo)
       ;; ("o" . nil)
       ("p" . org-capture)
       ("q" . org-previous-link)
       ;; ("r" . nil)
       ;; ("s" . nil)
       ("t" . cp/consult-ripgrep-with-directory)
       ;; ("u" . mode-specific-map)
       ("v" . magit-status)
       ("w" . ace-swap-window)
       ;; ("x" . nil)
       ;; ("y" . nil)
       ;; ("z" . nil)
       ))

    ;; change variable before require the extension
    (setq xah-fly-keys-layer-misc-enter-open-line t
          xah-fly-keys-layer-misc-autosave t)
    (require 'xah-fly-keys-layer-misc)

    ;; end of the package here
    )

#+end_src
